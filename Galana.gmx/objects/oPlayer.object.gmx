<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer_Shooting</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial Setup

//Movement
spd = 1.7
hsp = 0; m_hsp = 8
vsp = 0; m_vsp = 8
dmp = .2

//Character Properties
hth = 9; m_hth = hth

// Character status
is_invincible = false

//Inputs
key_left = ord("A")
key_right = ord("D")
key_shoot = vk_space

//Horizontal Edge Damping
edge_padding = 32 + 16

//Shooting
bullet_offset_x = 9
bullet_offset_y = 20
bullet_speed = 7
bullet_which = -1
bullet_timer = 0; m_bullet_timer = 5
chamber_amount = 0; m_chamber_amount = 16
chamber_reset = false

chamber_bonus = 8
chamber_bonus_timer = 0
m_chamber_bonus_timer = 70

//Anims
image_speed = .1
anim_idle = sPlayer_Idle
anim_shooting = sPlayer_Shooting

//Rotating
vrotate_angle = 35
vrotate_speed = .1

//TEAM
team = TEAM_FRIENDLY

//camera shake
shake_amount = 15

//fire
fire = instance_create(x, y, oPlayerFire)
fire.stick_to = id

//flashing health bar
hth_f = false

// Upgrades
can_missile = false
number_pickups = 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset score
score = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>No longer invincible</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cancel invincibility
is_invincible = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply movement to velocity

//get input
var hi = scrGetAxis("player_h")

//mobile inputs
if (scrIsMobile()) {
    //relative
    if (scrMobileInputType() == "relative") {
        hi = scrMobileInputGetAccX()
    }
    
    //absolute
    if (scrMobileInputType() == "absolute") {
        x = lerp(x, ((scrMobileInputGetAccX() + 1) / 2 ) * (room_width), .2)
    }
}

//apply it
hsp = hsp + hi*spd
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damp and Max Velocity

//damp
hsp = lerp(hsp, 0, dmp)
vsp = lerp(vsp, 0, dmp)

//round
if (abs(hsp) &lt; .15) {hsp = 0}
if (abs(vsp) &lt; .15) {vsp = 0}

//max
hsp = clamp(hsp, -m_hsp, m_hsp)
vsp = clamp(vsp, -m_vsp, m_vsp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Horizontal Edge Damping

if (x &lt; edge_padding or x &gt; room_width-edge_padding) {
    hsp = lerp(hsp, (2*spd) * (room_width/2 - x)/room_width, 0.5)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Velocity to position

x += hsp
y += vsp
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Face Velocity

//we will never fully rotate, so Slerp is not necessary
image_angle = lerp(image_angle, vrotate_angle * -hsp/(m_hsp), vrotate_speed)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting

//shoot in facing direction
if (scrGetAction("player_shoot")) {
    //do we have bullets left?
    if (chamber_amount &lt; m_chamber_amount and !chamber_reset) {    
        //Shoot
        scrShoot(-1, oBullet)
        
        chamber_amount++
        
        // Shotgun shot
        if (chamber_bonus_timer &gt;= m_chamber_bonus_timer) {
            chamber_bonus_timer = 0
            if not can_missile {
                for (i = 0; i &lt; chamber_bonus; i++) {
                    bullet_timer = m_bullet_timer
                    with (scrShoot(-1, oBullet)) {
                        hsp += random_range(-1, 1)
                    }
                }
            } else {
                for (i = 0; i &lt; 3; i++) {
                    bullet_timer = m_bullet_timer
                    with (scrShoot(-1, oMissile)) {
                        hsp += random_range(-1, 1)
                    }
                }
            }
        }
        
        /*
        // And Bonus (Shotgun shot)
        if (chamber_bonus_timer &gt; 0) {
            var bonus = floor(chamber_bonus * scrShotChargeCurve(chamber_bonus_timer / m_chamber_bonus_timer))
            chamber_bonus_timer = 0
            var bt = bullet_timer
            var bul = oBullet
            if can_missile and chamber_bonus_timer &gt;= m_chamber_bonus_timer {
                bul = oMissile
            }
            bullet_timer = m_bullet_timer
            while (bonus &gt; 0) {
                bonus--
                var b = scrShoot(-1, bul)
                with (b) {hsp += random_range(-1, 1)}
            }
            bullet_timer = bt
        } */
    } else {
        chamber_reset = true
    }
    
    // SLOWLY CHARGE BONUS ATTACK
    chamber_bonus_timer += .4
    
} else {
    // Charge a bonus attack
    chamber_bonus_timer++
    if (chamber_bonus_timer &gt; m_chamber_bonus_timer) {
        chamber_bonus_timer = m_chamber_bonus_timer
    }
}

if (chamber_reset) {
    //lower chamber
    chamber_amount--
    
    if (chamber_amount &lt;= 0) {
        chamber_reset = false
    }
}

//limit chamber amount
chamber_amount = clamp(chamber_amount, 0, m_chamber_amount)


//increase timer
bullet_timer++
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Are We Dead?
if (hth &lt;= 0 and !global.DEV_INVINCIBLE) {

    // Get Wave Number 
    var wave = wave_num // from globalvar
    
    // Record score to file
    scrRecordRun(wave, score, lap)
    
    //Audio
    scrPlaySound(explosion)
    
    //Explode!
    scrCreateBigExplosionOnUs()
    
    //create fade out object
    instance_create(0, 0, oCircleFade)
    
    // Destroy me
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBulletEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Damage

if (not is_invincible) {
    scrTakeDamage(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dissipate Other

//dissipate them
with (other) {
    scrGetDissipated()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Other
with (other){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Damage
if (not is_invincible) {
    scrTakeDamage(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake &amp; Explosion

//explode
//instance_create(x, y, oExplosion)
with(instance_create(x, y, oShieldDissipation)) {
    hth = other.hth
    m_hth = other.m_hth
}

//shake &amp; bake!
scrCameraShake(shake_amount, shake_amount)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Flash

scrCameraFlash()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
scrPlaySound(player_hit)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Invincible Frames
is_invincible = true
alarm[0] = 25
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Animation

sprite_index = anim_idle

if (keyboard_check(key_shoot)){
    sprite_index = anim_shooting
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health circle

//get stats
var totalSegments = m_hth-1
var currentSegments = hth-1
var col = COL_FRIENDLY_DARK

//should it flash?
if (totalSegments == currentSegments and current_time % 4 == 0) {
    col = COL_FRIENDLY_LIGHT
}

//should it completely flash?
if (hth_f) {
    if (current_time/2 % 2 == 0) draw_set_alpha(0)
    currentSegments = min(currentSegments+1, m_hth-1)
}

scrDrawHealthRing(x, y, 16, 8, totalSegments, currentSegments, 0, 360, 1, col)

//reset
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw bonus shot circle

//get stats
var totalSegments = 100
var currentSegments = floor(100 * scrShotChargeCurve(chamber_bonus_timer / m_chamber_bonus_timer))
var col = COL_FRIENDLY_DARK

scrDrawHealthRing(x, y, 28, 2, totalSegments, currentSegments, 0, 360, 1, col)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Invincible Flashing

image_alpha = 1
if (is_invincible) {
    if (current_time % 2 == 0) {
        image_alpha = 0.2
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
